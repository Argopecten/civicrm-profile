<?php

/**
 * @file
 * Install, update and uninstall functions for the civicrm installation profile.
 */

 /**
  * Implements hook_install().
  *
  * Performs actions to set up the site for this profile.
  * Based on minimal.install
  *
  * @see system_install()
  */
 function civicrmprofile_install() {
   // set default theme other then bartik
   $enable = array(
     'theme_default' => 'civiboot',
     'admin_theme' => 'seven',
   );
   theme_enable($enable);

   foreach ($enable as $var => $theme) {
     if (!is_numeric($var)) {
       variable_set($var, $theme);
     }
   }

   // Disable the default Bartik theme
   theme_disable(array('bartik'));

   // Enable standard content block only.
   $default_theme = variable_get('theme_default', 'civiboot');
   $values = array(
     array(
       'module' => 'system',
       'delta' => 'main',
       'theme' => $default_theme,
       'status' => 1,
       'weight' => 0,
       'region' => 'content',
       'pages' => '',
       'cache' => -1,
     ),
   );
   $query = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'pages', 'cache'));
   foreach ($values as $record) {
     $query->values($record);
   }
   $query->execute();

  // Roles
  // by default:' anonymous user' & 'authenticated user'

  // 3. site administrator
  $siteadmin_role = new stdClass();
  $siteadmin_role->name = t('site admin');
  $siteadmin_role->weight = 5;
  user_role_save($siteadmin_role);
  // Set this as the administrator role.
  variable_set('user_admin_role', $siteadmin_role->rid);
  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array(
    'uid' => 1,
    'rid' => $siteadmin_role->rid,
  ))
    ->execute();

  // Only admin can register new users.
  variable_set('user_register', USER_REGISTER_ADMINISTRATORS_ONLY);

  // 4. CRM users
  $crmuser_role = new stdClass();
  $crmuser_role->name = t('crm user');
  $crmuser_role->weight = 2;
  user_role_save($crmuser_role);

  //5. super users
  $superuser_role = new stdClass();
  $superuser_role->name = t('super user');
  $superuser_role->weight = 3;
  user_role_save($superuser_role);

  // 6. CRM admins
  $crmadmin_role = new stdClass();
  $crmadmin_role->name = t('crm admin');
  $crmadmin_role->weight = 4;
  user_role_save($crmadmin_role);

  // 7. CRM activist
  $activist_role = new stdClass();
  $activist_role->name = t('activist');
  $activist_role->weight = 4;
  user_role_save($activist_role);

  // TFA settings
  // https://git.drupalcode.org/project/tfa/blob/7.x-2.x/tfa.admin.inc

  // - TFA is enabled
  variable_set('tfa_enabled', TRUE);

  // Default validation plugin is TOTP
  variable_set('tfa_validate_plugin', 'tfa_basic_totp');

  // Fallback plugins are recovery codes and help page
  variable_set('tfa_fallback_plugins',
    array(
      '-999' => 'tfa_basic_totp',
      '0'    => 'tfa_basic_recovery_code',
      '10'   => 'tfa_basic_help',
    )
  );

  // trusted browser plugin
  variable_set('tfa_login_plugins',
    array(
      'tfa_basic_trusted_browser',
    )
  );

  // roles, identified by rid, required to have set up TFA
  variable_set('tfa_basic_roles_require',
    array(
      '1' => '0',
      '2' => '0',
      '3' => '0',
      '4' => '0',
      '5' => '0',
      '6' => '0',
      '7' => '0',
    )
  );
}

/**
 * Implements hook_modules_installed.
 *
 * it gives all other modules a chance to perform actions when a module is installed
 * API doc: This hook should be implemented in the .module file!
 *
 *  1) enable CiviCRM standard components
 *  2) enable CiviCRM extensions
 *  3) enable CiviCRM modules
 *  4) this flavor is using households, do not remove it!
 *  5) set various CRM options: display, name format, ...
 */
function civicrmprofile_modules_installed($modules) {
  // drush_log('It"s the civicrmprofile_modules_installed hook', 'debug');

  if (in_array('civicrm', $modules)) {
    // CiviCRM module is installed
    // drush_log('civicrmprofile_modules_installed: CiviCRM module installed', 'debug');

    // 1) enable CiviCRM standard components
    \Civi\Api4\Setting::set()
      ->addValue('enable_components', [
        'CiviMail',
      ])
      ->setCheckPermissions(FALSE)
      ->execute();

    // 2) enable CiviCRM extensions
    $extensions = array(
      'org.civicrm.shoreditch',
      'nz.co.fuzion.csvimport',
      'org.civicrm.flexmailer',
      'org.civicrm.angularprofiles',
      'org.civicrm.contactlayout',
      'org.civicrm.volunteer',
      'de.systopia.osm',
    );
    _civicrmprofile_enable_extensions($extensions);

    // 3) enable CiviCRM modules
    module_enable(
      array(
        'civicrmtheme',
      ),
      TRUE
    );

    // 4) this flavor is using households, do not remove it!

    // 5) set various CRM options: display, name format, ...
    _civicrmprofile_set_crm_options();

  }
}

// Enable CiviCRM extensions
function _civicrmprofile_enable_extensions($extensions) {
  // download is via composer
  foreach ($extensions as $key => $ext) {
    try{
      civicrm_api3('Extension', 'enable', ['key' => $ext,]);
    }
    catch (CiviCRM_API3_Exception $e) {
      $errorMessage = $e->getMessage();
      $errorCode = $e->getErrorCode();
      $errorData = $e->getExtraParams();
      $result = array(
        'is_error' => 1,
        'error_message' => $errorMessage,
        'error_code' => $errorCode,
        'error_data' => $errorData,
      );
      drush_log('civicrmprofile enable_extensions:' . print_r($result, 1), 'warning');
    }
  }
}

/**
 * _civicrmprofile_set_crm_options()
 *
 * set various CRM options: display, name format, ...
 * settings:
 *   - contact options: with relationships (2)
 *   - mobile phone providers for HU
 *   - phone types
 *   - individual prefixes
 */
function _civicrmprofile_set_crm_options() {
  // 1) contact options
  \Civi\Api4\Setting::set()
    ->addValue('contact_view_options', [1, 2, 3, 4, 5, 6, 10, 14, ])
    ->addValue('contact_edit_options', [12, 14, 15, 16, 7, 8, 5, 1, 2, 3, 4, 6, ])
    ->addValue('user_dashboard_options', [1, 5, 9, ])
    ->addValue('display_name_format', '{contact.individual_prefix}{ }{contact.last_name}{ }{contact.first_name}')
    ->setCheckPermissions(FALSE)
    ->execute();

  // 2) Mobile phone providers
  \Civi\Api4\OptionValue::update()
    ->addWhere('option_group_id', '=', 5)
    ->addWhere('value', '=', 1)
    ->addValue('label', 'T-Mobile')
    ->addValue('name',  'T-Mobile')
    ->setCheckPermissions(FALSE)
    ->execute();
  \Civi\Api4\OptionValue::update()
    ->addWhere('option_group_id', '=', 5)
    ->addWhere('value', '=', 2)
    ->addValue('label', 'Vodafone')
    ->addValue('name',  'Vodafone')
    ->setCheckPermissions(FALSE)
    ->execute();
  \Civi\Api4\OptionValue::update()
    ->addWhere('option_group_id', '=', 5)
    ->addWhere('value', '=', 3)
    ->addValue('label', 'Telenor')
    ->addValue('name',  'Telenor')
    ->setCheckPermissions(FALSE)
    ->execute();

  // 3) phone types
  \Civi\Api4\OptionValue::update()
    ->addWhere('option_group_id', '=', 35)
    ->addWhere('value', '=', 2)
    ->addValue('label', 'Mobil')
    ->addValue('name', 'Mobil')
    ->addValue('is_default', 1)
    ->setCheckPermissions(FALSE)
    ->execute();
  \Civi\Api4\OptionValue::update()
    ->addWhere('option_group_id', '=', 35)
    ->addWhere('value', '=', 1)
    ->addValue('label', 'Vezetékes')
    ->addValue('name', 'Vezetékes')
    ->addValue('is_default', 0)
    ->setCheckPermissions(FALSE)
    ->execute();
  \Civi\Api4\OptionValue::update()
    ->addWhere('option_group_id', '=', 35)
    ->addWhere('id', '>=', 333)
    ->addValue('is_active', 0)
    ->setCheckPermissions(FALSE)
    ->execute();

  // 4) contact prefixes
  \Civi\Api4\OptionValue::update()
    ->addWhere('option_group_id', '=', 6)
    ->addWhere('value', '=', 1)
    ->addValue('label', 'özv.')
    ->addValue('name', 'özv.')
    ->setCheckPermissions(FALSE)
    ->execute();
  \Civi\Api4\OptionValue::update()
    ->addWhere('option_group_id', '=', 6)
    ->addWhere('value', '=', 2)
    ->addValue('label', 'ifj.')
    ->addValue('name', 'ifj.')
    ->setCheckPermissions(FALSE)
    ->execute();
  \Civi\Api4\OptionValue::update()
    ->addWhere('option_group_id', '=', 6)
    ->addWhere('value', '=', 3)
    ->addValue('label', 'prof.')
    ->addValue('name', 'prof.')
    ->setCheckPermissions(FALSE)
    ->execute();

  // 5) advanced search options: with relationships (4)
  \Civi\Api4\Setting::set()
    ->addValue('advanced_search_options', [ 1, 2, 3, 4, 5, 6, 10, 13, 16, 17, 18, 19, ])
    ->setCheckPermissions(FALSE)
    ->execute();
}

/**
 * implement hosting_civicrm hook to modify the civicrm.settings.php file template.
 */
function civicrmprofile_civicrm_settings_template_alter(&$template) {
  // drush_log('It"s the civicrmprofile_civicrm_settings_template_alter hook.' . $template, 'debug');

}
